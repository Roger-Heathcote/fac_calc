PLAN

    Create a calc module that returns instances of a calc class
    Create a test file that tests the calc class
    TDD the calc class
        Class will use Formula/Expression logic
        Class needs to support the following methods
            equals
            add_char
            clear
            display
    Create an index.html & index.css file
    Import calc code
    Add interface code
    Refactor buttons
        Remove code from onClicks
        Replace with event delegation
>   Lay it out nicely
        With regard to
            Accessibility
                Allow keyboard keys
                Ensure good focus visibility
                Ensure good contrast
                Check with screen reader
                Use chrome audit to check for other issues
            Responsiveness
                Check on large monitor
                Check on phone sizes


ACTIONS

        Have a max width/height

        Make it so very long numbers don't break the l/r padding
            Design questions...
            What should be the length of the display?
            Should we limit the length of expressions to this?

ACCESSIBILITY CONCERNS

    Tab navigation is not optimal and presents some tricky issues of its own. As calc can be Probably operated with the keyboard keys it may be best to remove it from the tab order altogether.

        BUT!!!
        BUT!!!
        BUT!!!

            Of course it wouldn't be that easy. It turns out Orca captures the number keys for
            it's own purposes and I can't see any way of changing that in the settings.
            It does however read out the buttons as tey are clicked with the mouse and does read
            out the results of the calculation.

            And then it turns out that's only in Firefox!

            Chromium does see the digits typed on keyboard BUT it doesn't say them out loud
            whether they are clicked or typed!

    How best to make the calculation results available to screen readers? Aria live-regions may be of some use. We don't want the full display reading out every time, only when queried or when the equals button is pressed. On the face of it the status role seems appropriate. Polite and atomic may also be relevant.

    https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions

DONE

    User Story #1: My calculator should contain a clickable element containing an = (equal sign) with a corresponding id="equals".

    User Story #2: My calculator should contain 10 clickable elements containing one number each from 0-9, with the following corresponding IDs: id="zero", id="one", id="two", id="three", id="four", id="five", id="six", id="seven", id="eight", and id="nine".

    User Story #3: My calculator should contain 4 clickable elements each containing one of the 4 primary mathematical operators with the following corresponding IDs: id="add", id="subtract", id="multiply", id="divide".

    User Story #4: My calculator should contain a clickable element containing a . (decimal point) symbol with a corresponding id="decimal".

    User Story #5: My calculator should contain a clickable element with an id="clear".
  
    User Story #6: My calculator should contain an element to display values with a corresponding id="display".

    User Story #7: At any time, pressing the clear button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of display.

    User Story #8: As I input numbers, I should be able to see my input in the element with the id of display.

    User Story #9: In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, and when I hit =, the correct result should be shown in the element with the id of display.

    User Story #10: When inputting numbers, my calculator should not allow a number to begin with multiple zeros.

    User Story #11: When the decimal element is clicked, a . should append to the currently displayed value; two . in one number should not be accepted.

    User Story #12: I should be able to perform any operation (+, -, *, /) on numbers containing decimal points.

    User Story #13: If 2 or more operators are entered consecutively, the operation performed should be the last operator entered (excluding the negative (-) sign). For example, if 5 + * 7 = is entered, the result should be 35 (i.e. 5 * 7); if 5 * - 5 = is entered, the result should be -25 (i.e. 5 x (-5)).

    User Story #14: Pressing an operator immediately following = should start a new calculation that operates on the result of the previous evaluation.

    User Story #15: My calculator should have several decimal places of precision when it comes to rounding (note that there is no exact standard, but you should be able to handle calculations like 2 / 7 with reasonable precision to at least 4 decimal places).

    Refactor buttons
        Remove code from onClicks
        Replace with event delegation

    Added keyboard control

    Have the calculator centred.
    Detect horiz/vert screen and change button layout accordingly

    Tab focus is barely visible, make it much more obvious

    Calc does not include a relative size so text does not scale when zoomed. That said the text is as large as it can get without breaking the layout. That said in full
    screen it doesn't fit so well and can't, as of yet, be zoomed out.


